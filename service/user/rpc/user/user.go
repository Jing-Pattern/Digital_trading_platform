// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package user

import (
	"context"

	"Digital_trading_platform/service/user/rpc/types/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Code            = user.Code
	IdRequest       = user.IdRequest
	PeoMachVerify   = user.PeoMachVerify
	PwdRequest      = user.PwdRequest
	Result          = user.Result
	SendCode        = user.SendCode
	UserInfo        = user.UserInfo
	UserInfoWithPwd = user.UserInfoWithPwd

	User interface {
		Register(ctx context.Context, in *UserInfoWithPwd, opts ...grpc.CallOption) (*Result, error)
		Login(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfo, error)
		GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfo, error)
		SaveUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Result, error)
		UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error)
		DeleteUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Result, error)
		ChangeUserPwd(ctx context.Context, in *PwdRequest, opts ...grpc.CallOption) (*Result, error)
		SendCode(ctx context.Context, in *SendCode, opts ...grpc.CallOption) (*Code, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Register(ctx context.Context, in *UserInfoWithPwd, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUser) Login(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) GetUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUser) SaveUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SaveUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUser) ChangeUserPwd(ctx context.Context, in *PwdRequest, opts ...grpc.CallOption) (*Result, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.ChangeUserPwd(ctx, in, opts...)
}

func (m *defaultUser) SendCode(ctx context.Context, in *SendCode, opts ...grpc.CallOption) (*Code, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.SendCode(ctx, in, opts...)
}
